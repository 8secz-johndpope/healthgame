-- MySQL Script generated by MySQL Workbench
-- 08/03/15 13:44:57
-- Model: Healingo    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema healingo
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Table `User`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `User` ;

CREATE TABLE IF NOT EXISTS `User` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(45) NULL COMMENT 'vielleicht später firstname, lastname',
  `fitbitUserId` VARCHAR(20) NULL,
  `fitbitAccessToken` VARCHAR(512) NULL,
  `fitbitRefreshToken` VARCHAR(512) NULL,
  `realm` VARCHAR(512) NULL,
  `username` VARCHAR(255) NULL,
  `password` VARCHAR(512) NULL,
  `credentials` TEXT NULL,
  `challenges` TEXT NULL,
  `email` VARCHAR(255) NULL,
  `emailVerified` TINYINT(1) NOT NULL,
  `verificationToken` VARCHAR(512) NULL,
  `status` VARCHAR(512) NULL,
  `created` DATETIME NOT NULL COMMENT 'heißt nicht createdAt wegen Loopback',
  `lastUpdated` DATETIME NULL COMMENT 'heißt nicht lastUpdatedAt wegen Loopback',
  `notifyDaily` TINYINT(1) NULL DEFAULT 1,
  `privacyFriend` TINYINT(1) NULL DEFAULT 0,
  `privacyPublic` TINYINT(1) NULL DEFAULT 0,
  `avatar100` VARCHAR(512) NULL DEFAULT NULL,
  `avatar150` VARCHAR(512) NULL DEFAULT NULL,
  `notificationLogPositionId` INT UNSIGNED NULL DEFAULT NULL COMMENT 'bis dahin wurden die NotifcationLogs vom User gelesen',
  `deleteToken` VARCHAR(45) NULL,
  `deleted` TINYINT(1) NULL DEFAULT 0,
  PRIMARY KEY (`id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;

CREATE UNIQUE INDEX `unique_email` ON `User` (`email` ASC);

CREATE UNIQUE INDEX `fitbitUserId_UNIQUE` ON `User` (`fitbitUserId` ASC);


-- -----------------------------------------------------
-- Table `PointLog`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `PointLog` ;

CREATE TABLE IF NOT EXISTS `PointLog` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `userId` INT UNSIGNED NOT NULL,
  `dayAt` DATE NOT NULL,
  `points` INT UNSIGNED NOT NULL DEFAULT 0,
  `type` VARCHAR(32) NOT NULL,
  `createdAt` DATETIME NOT NULL,
  PRIMARY KEY (`id`),
  CONSTRAINT `point_log_user_fk`
    FOREIGN KEY (`userId`)
    REFERENCES `User` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;

CREATE INDEX `point_log_user_fk_idx` ON `PointLog` (`userId` ASC);


-- -----------------------------------------------------
-- Table `BadgeLog`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `BadgeLog` ;

CREATE TABLE IF NOT EXISTS `BadgeLog` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `userId` INT UNSIGNED NOT NULL,
  `reachedAt` DATE NOT NULL,
  `type` VARCHAR(32) NOT NULL,
  `pointLogId` INT UNSIGNED NULL,
  PRIMARY KEY (`id`),
  CONSTRAINT `badge_point_log_fk`
    FOREIGN KEY (`pointLogId`)
    REFERENCES `PointLog` (`id`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION,
  CONSTRAINT `badge_user_fk`
    FOREIGN KEY (`userId`)
    REFERENCES `User` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;

CREATE INDEX `badge_user_fk_idx` ON `BadgeLog` (`userId` ASC);

CREATE INDEX `badge_point_log_fk_idx` ON `BadgeLog` (`pointLogId` ASC);


-- -----------------------------------------------------
-- Table `Challenge`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Challenge` ;

CREATE TABLE IF NOT EXISTS `Challenge` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `userId` INT UNSIGNED NOT NULL COMMENT 'user_id ist der Besitzer der Challenge',
  `weekAt` DATE NOT NULL,
  `name` VARCHAR(255) NOT NULL,
  `type` VARCHAR(32) NOT NULL,
  `numTeams` INT UNSIGNED NULL,
  `perTeam` INT UNSIGNED NULL,
  PRIMARY KEY (`id`),
  CONSTRAINT `challenge_user_fk`
    FOREIGN KEY (`userId`)
    REFERENCES `User` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;

CREATE UNIQUE INDEX `unique_weekly_challenge_week_user` ON `Challenge` (`userId` ASC, `weekAt` ASC);


-- -----------------------------------------------------
-- Table `ChallengeInvite`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ChallengeInvite` ;

CREATE TABLE IF NOT EXISTS `ChallengeInvite` (
  `userId` INT UNSIGNED NOT NULL,
  `challengeId` INT UNSIGNED NOT NULL,
  `teamNum` INT UNSIGNED NOT NULL,
  `created` DATETIME NULL,
  `ChallengeInvitecol` VARCHAR(45) NULL,
  PRIMARY KEY (`userId`, `challengeId`),
  CONSTRAINT `challenge_invite_challenge_idx`
    FOREIGN KEY (`challengeId`)
    REFERENCES `Challenge` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `challenge_invite_user_idx`
    FOREIGN KEY (`userId`)
    REFERENCES `User` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;

CREATE INDEX `challenge_invite_challenge_idx_idx` ON `ChallengeInvite` (`challengeId` ASC);


-- -----------------------------------------------------
-- Table `ChallengeTeam`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ChallengeTeam` ;

CREATE TABLE IF NOT EXISTS `ChallengeTeam` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `challengeId` INT UNSIGNED NOT NULL,
  `teamNum` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`id`),
  CONSTRAINT `challenge_team_challenge_fk`
    FOREIGN KEY (`challengeId`)
    REFERENCES `Challenge` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;

CREATE INDEX `challenge_idx` ON `ChallengeTeam` (`challengeId` ASC);


-- -----------------------------------------------------
-- Table `Quiz`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Quiz` ;

CREATE TABLE IF NOT EXISTS `Quiz` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `title` VARCHAR(255) NOT NULL,
  `description` TEXT NULL,
  `dayAt` DATE NULL,
  `question1` TEXT NOT NULL,
  `question2` TEXT NOT NULL,
  `question3` TEXT NOT NULL,
  `answer1A` TEXT NOT NULL,
  `answer1B` TEXT NOT NULL,
  `answer1C` TEXT NOT NULL,
  `answer1D` TEXT NOT NULL,
  `answer2A` TEXT NOT NULL,
  `answer2B` TEXT NOT NULL,
  `answer2C` TEXT NOT NULL,
  `answer2D` TEXT NOT NULL,
  `answer3A` TEXT NOT NULL,
  `answer3B` TEXT NOT NULL,
  `answer3C` TEXT NOT NULL,
  `answer3D` TEXT NOT NULL,
  `solution1` TINYINT(1) UNSIGNED NOT NULL,
  `solution2` TINYINT(1) UNSIGNED NOT NULL,
  `solution3` TINYINT(1) UNSIGNED NOT NULL,
  `info1` TEXT NULL,
  `info2` TEXT NULL,
  `info3` TEXT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;

CREATE UNIQUE INDEX `dayAt_UNIQUE` ON `Quiz` (`dayAt` ASC);


-- -----------------------------------------------------
-- Table `DailyStatus`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `DailyStatus` ;

CREATE TABLE IF NOT EXISTS `DailyStatus` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `userId` INT UNSIGNED NOT NULL,
  `dayAt` DATE NOT NULL,
  `stepsDone` INT UNSIGNED NULL DEFAULT NULL,
  `stepsManual` INT UNSIGNED NULL DEFAULT NULL,
  `stepsTotal` INT UNSIGNED NULL DEFAULT NULL,
  `stepsGoal` INT UNSIGNED NULL DEFAULT NULL,
  `goalReached` TINYINT(1) NULL DEFAULT 0,
  `goalMailedAt` DATETIME NULL DEFAULT NULL,
  `quizId` INT UNSIGNED NULL DEFAULT NULL,
  `quizAnswer1` TINYINT(1) UNSIGNED NULL DEFAULT NULL,
  `quizAnswer2` TINYINT(1) UNSIGNED NULL DEFAULT NULL,
  `quizAnswer3` TINYINT(1) UNSIGNED NULL DEFAULT NULL,
  `quizOk1` TINYINT(1) NULL DEFAULT NULL,
  `quizOk2` TINYINT(1) NULL DEFAULT NULL,
  `quizOk3` TINYINT(1) NULL DEFAULT NULL,
  `stepPointLogId` INT UNSIGNED NULL,
  `quizPointLogId` INT UNSIGNED NULL DEFAULT NULL,
  `loginPointLogId` INT UNSIGNED NULL DEFAULT NULL,
  `stepsFetchedAt` DATETIME NULL DEFAULT NULL,
  `stepsProcessedAt` DATETIME NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  CONSTRAINT `daily_login_points_fk`
    FOREIGN KEY (`loginPointLogId`)
    REFERENCES `PointLog` (`id`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION,
  CONSTRAINT `daily_quiz_fk`
    FOREIGN KEY (`quizId`)
    REFERENCES `Quiz` (`id`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION,
  CONSTRAINT `daily_quiz_points_fk`
    FOREIGN KEY (`quizPointLogId`)
    REFERENCES `PointLog` (`id`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION,
  CONSTRAINT `daily_step_points_fk`
    FOREIGN KEY (`stepPointLogId`)
    REFERENCES `PointLog` (`id`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION,
  CONSTRAINT `daily_user_fk`
    FOREIGN KEY (`userId`)
    REFERENCES `User` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;

CREATE UNIQUE INDEX `unique_user_day` ON `DailyStatus` (`userId` ASC, `dayAt` ASC);

CREATE INDEX `daily_quiz_fk_idx` ON `DailyStatus` (`quizId` ASC);

CREATE INDEX `daily_points_fk_idx` ON `DailyStatus` (`stepPointLogId` ASC);

CREATE INDEX `daily_quiz_points_fk_idx` ON `DailyStatus` (`quizPointLogId` ASC);

CREATE INDEX `daily_login_points_fk_idx` ON `DailyStatus` (`loginPointLogId` ASC);


-- -----------------------------------------------------
-- Table `Friendship`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Friendship` ;

CREATE TABLE IF NOT EXISTS `Friendship` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `userId` INT UNSIGNED NOT NULL,
  `friendId` INT UNSIGNED NOT NULL,
  `confirmed` TINYINT(1) NOT NULL DEFAULT 0,
  PRIMARY KEY (`id`),
  CONSTRAINT `friendship_friend_fk`
    FOREIGN KEY (`friendId`)
    REFERENCES `User` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `friendship_user_fk`
    FOREIGN KEY (`userId`)
    REFERENCES `User` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;

CREATE UNIQUE INDEX `friendship_user_idx` ON `Friendship` (`userId` ASC, `friendId` ASC);

CREATE UNIQUE INDEX `firendship_friend_idx` ON `Friendship` (`friendId` ASC, `userId` ASC);


-- -----------------------------------------------------
-- Table `Level`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Level` ;

CREATE TABLE IF NOT EXISTS `Level` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(200) NOT NULL,
  `pointsStart` INT UNSIGNED NOT NULL,
  `pointsEnd` INT UNSIGNED NULL,
  `lat` FLOAT NOT NULL,
  `lng` FLOAT NOT NULL,
  `nextId` INT UNSIGNED NULL,
  PRIMARY KEY (`id`),
  CONSTRAINT `level_next`
    FOREIGN KEY (`nextId`)
    REFERENCES `Level` (`id`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;

CREATE INDEX `level_next_idx` ON `Level` (`nextId` ASC);


-- -----------------------------------------------------
-- Table `WeeklyGoalCategory`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `WeeklyGoalCategory` ;

CREATE TABLE IF NOT EXISTS `WeeklyGoalCategory` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `parentId` INT UNSIGNED NULL,
  `name` VARCHAR(255) NOT NULL,
  `description` TEXT NOT NULL,
  PRIMARY KEY (`id`),
  CONSTRAINT `weekly_goal_cat_parent_fk`
    FOREIGN KEY (`parentId`)
    REFERENCES `WeeklyGoalCategory` (`id`)
    ON DELETE RESTRICT
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;

CREATE INDEX `parent_idx` ON `WeeklyGoalCategory` (`parentId` ASC);


-- -----------------------------------------------------
-- Table `WeeklyGoal`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `WeeklyGoal` ;

CREATE TABLE IF NOT EXISTS `WeeklyGoal` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `categoryId` INT UNSIGNED NOT NULL,
  `title` VARCHAR(255) NOT NULL,
  `description` TEXT NOT NULL,
  PRIMARY KEY (`id`),
  CONSTRAINT `weekly_goal_category_fk`
    FOREIGN KEY (`categoryId`)
    REFERENCES `WeeklyGoalCategory` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;

CREATE INDEX `category_idx` ON `WeeklyGoal` (`categoryId` ASC);


-- -----------------------------------------------------
-- Table `LevelLog`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `LevelLog` ;

CREATE TABLE IF NOT EXISTS `LevelLog` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `userId` INT UNSIGNED NOT NULL,
  `levelId` INT UNSIGNED NOT NULL,
  `reachedAt` DATE NOT NULL,
  `pointLogId` INT UNSIGNED NULL,
  PRIMARY KEY (`id`),
  CONSTRAINT `level_level_fk`
    FOREIGN KEY (`levelId`)
    REFERENCES `Level` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `level_points_fk`
    FOREIGN KEY (`pointLogId`)
    REFERENCES `PointLog` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `level_user_fk`
    FOREIGN KEY (`userId`)
    REFERENCES `User` (`id`)
    ON DELETE RESTRICT
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;

CREATE INDEX `level_user_fk_idx` ON `LevelLog` (`userId` ASC);

CREATE INDEX `level_fk_idx` ON `LevelLog` (`levelId` ASC);

CREATE INDEX `points_idx` ON `LevelLog` (`pointLogId` ASC);


-- -----------------------------------------------------
-- Table `UserGoal`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `UserGoal` ;

CREATE TABLE IF NOT EXISTS `UserGoal` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `userId` INT UNSIGNED NOT NULL,
  `startsAt` DATE NOT NULL,
  `endsAt` DATE NOT NULL,
  `weeklyGoalId` INT UNSIGNED NOT NULL,
  `completedDays` INT UNSIGNED NULL,
  `pointLogId` INT UNSIGNED NULL,
  `goalDays` TINYINT UNSIGNED NOT NULL DEFAULT 7,
  `finished` TINYINT(1) NOT NULL DEFAULT 0,
  `tip` MEDIUMTEXT NULL,
  PRIMARY KEY (`id`),
  CONSTRAINT `user_goals_pointlog_fk`
    FOREIGN KEY (`pointLogId`)
    REFERENCES `PointLog` (`id`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION,
  CONSTRAINT `user_goals_user_fk`
    FOREIGN KEY (`userId`)
    REFERENCES `User` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `user_goals_weekly_fk`
    FOREIGN KEY (`weeklyGoalId`)
    REFERENCES `WeeklyGoal` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;

CREATE INDEX `user_idx` ON `UserGoal` (`userId` ASC);

CREATE INDEX `goal_idx` ON `UserGoal` (`weeklyGoalId` ASC);

CREATE INDEX `pointlog_idx` ON `UserGoal` (`pointLogId` ASC);


-- -----------------------------------------------------
-- Table `WeeklyStatus`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `WeeklyStatus` ;

CREATE TABLE IF NOT EXISTS `WeeklyStatus` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `userId` INT UNSIGNED NOT NULL,
  `weekAt` DATE NOT NULL,
  `challengeId` INT UNSIGNED NULL,
  `challengePointLogId` INT UNSIGNED NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  CONSTRAINT `weekly_challenge_points_id_fk`
    FOREIGN KEY (`challengePointLogId`)
    REFERENCES `PointLog` (`id`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION,
  CONSTRAINT `weekly_user_fk`
    FOREIGN KEY (`userId`)
    REFERENCES `User` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `weeky_status_challenge_id`
    FOREIGN KEY (`challengeId`)
    REFERENCES `Challenge` (`id`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;

CREATE UNIQUE INDEX `unique_week_user` ON `WeeklyStatus` (`userId` ASC, `weekAt` ASC);

CREATE INDEX `weeky_status_challenge_id_idx` ON `WeeklyStatus` (`challengeId` ASC);

CREATE INDEX `weekly_challenge_points_id_fk_idx` ON `WeeklyStatus` (`challengePointLogId` ASC);


-- -----------------------------------------------------
-- Table `NotificationLog`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `NotificationLog` ;

CREATE TABLE IF NOT EXISTS `NotificationLog` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `userId` INT UNSIGNED NOT NULL,
  `createdAt` DATETIME NOT NULL,
  `type` VARCHAR(128) NOT NULL,
  `friendId` INT UNSIGNED NULL DEFAULT NULL,
  `badgeLogId` INT UNSIGNED NULL DEFAULT NULL,
  `challengeId` INT UNSIGNED NULL DEFAULT NULL,
  `levelLogId` INT UNSIGNED NULL DEFAULT NULL,
  `pointLogId` INT UNSIGNED NULL DEFAULT NULL,
  `dailyStatusId` INT UNSIGNED NULL DEFAULT NULL,
  `userGoalId` INT UNSIGNED NULL DEFAULT NULL,
  `friendshipId` INT UNSIGNED NULL DEFAULT NULL,
  `weeklyStatusId` INT UNSIGNED NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  CONSTRAINT `notification_user_fk`
    FOREIGN KEY (`userId`)
    REFERENCES `User` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `notification_friend_fk`
    FOREIGN KEY (`friendId`)
    REFERENCES `User` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `notification_badge_fk`
    FOREIGN KEY (`badgeLogId`)
    REFERENCES `BadgeLog` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `notification_challenge_fk`
    FOREIGN KEY (`challengeId`)
    REFERENCES `Challenge` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `notification_level_log_fk`
    FOREIGN KEY (`levelLogId`)
    REFERENCES `LevelLog` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `notification_point_log_fk`
    FOREIGN KEY (`pointLogId`)
    REFERENCES `PointLog` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `notification_daily_status_fk`
    FOREIGN KEY (`dailyStatusId`)
    REFERENCES `DailyStatus` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `notification_user_goal_fk`
    FOREIGN KEY (`userGoalId`)
    REFERENCES `UserGoal` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `notification_friendship_fk`
    FOREIGN KEY (`friendshipId`)
    REFERENCES `Friendship` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `notification_weeklystatus_fk`
    FOREIGN KEY (`weeklyStatusId`)
    REFERENCES `WeeklyStatus` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;

CREATE INDEX `user_idx` ON `NotificationLog` (`userId` ASC);

CREATE INDEX `notification_friend_fk_idx` ON `NotificationLog` (`friendId` ASC);

CREATE INDEX `notification_badge_fk_idx` ON `NotificationLog` (`badgeLogId` ASC);

CREATE INDEX `notification_challenge_fk_idx` ON `NotificationLog` (`challengeId` ASC);

CREATE INDEX `notification_level_log_fk_idx` ON `NotificationLog` (`levelLogId` ASC);

CREATE INDEX `notification_point_log_fk_idx` ON `NotificationLog` (`pointLogId` ASC);

CREATE INDEX `notification_daily_status_fk_idx` ON `NotificationLog` (`dailyStatusId` ASC);

CREATE INDEX `notification_friendship_fk_idx` ON `NotificationLog` (`friendshipId` ASC);

CREATE INDEX `notification_user_goal_fk_idx` ON `NotificationLog` (`userGoalId` ASC);

CREATE INDEX `notification_weeklystatus_fk_idx` ON `NotificationLog` (`weeklyStatusId` ASC);

CREATE INDEX `notification_log_order_ix` ON `NotificationLog` (`userId` DESC, `id` DESC);


-- -----------------------------------------------------
-- Table `Role`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Role` ;

CREATE TABLE IF NOT EXISTS `Role` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(45) NOT NULL,
  `description` VARCHAR(45) NOT NULL,
  `created` DATETIME NULL,
  `modified` DATETIME NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8
COLLATE = utf8_general_ci;

CREATE UNIQUE INDEX `key_UNIQUE` ON `Role` (`name` ASC);


-- -----------------------------------------------------
-- Table `Content`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Content` ;

CREATE TABLE IF NOT EXISTS `Content` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `key` VARCHAR(45) NOT NULL,
  `title` VARCHAR(45) NOT NULL,
  `markup` MEDIUMTEXT NOT NULL,
  `editableBy` INT UNSIGNED NULL,
  PRIMARY KEY (`id`),
  CONSTRAINT `Content_editableBy_fk`
    FOREIGN KEY (`editableBy`)
    REFERENCES `Role` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8
COLLATE = utf8_general_ci;

CREATE UNIQUE INDEX `key_UNIQUE` ON `Content` (`key` ASC);

CREATE INDEX `Content_fk_idx` ON `Content` (`editableBy` ASC);


-- -----------------------------------------------------
-- Table `RoleMapping`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `RoleMapping` ;

CREATE TABLE IF NOT EXISTS `RoleMapping` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `roleId` INT UNSIGNED NOT NULL,
  `principalId` INT UNSIGNED NOT NULL,
  `principalType` VARCHAR(45) NULL DEFAULT 'USER',
  PRIMARY KEY (`id`),
  CONSTRAINT `role_map_role_idx`
    FOREIGN KEY (`roleId`)
    REFERENCES `Role` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `role_map_user_idx`
    FOREIGN KEY (`principalId`)
    REFERENCES `User` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8
COLLATE = utf8_general_ci;

CREATE INDEX `role_map_role_idx_idx` ON `RoleMapping` (`roleId` ASC);

CREATE INDEX `role_map_user_idx_idx` ON `RoleMapping` (`principalId` ASC);


-- -----------------------------------------------------
-- Table `ChallengeTeamMember`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ChallengeTeamMember` ;

CREATE TABLE IF NOT EXISTS `ChallengeTeamMember` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `teamId` INT UNSIGNED NOT NULL,
  `userId` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`id`),
  CONSTRAINT `challenge_team_member_team_fk`
    FOREIGN KEY (`teamId`)
    REFERENCES `ChallengeTeam` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `challenge_team_member_user_fk`
    FOREIGN KEY (`userId`)
    REFERENCES `User` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `challenge_team_member_team_fk_idx` ON `ChallengeTeamMember` (`teamId` ASC);

CREATE INDEX `challenge_team_member_user_fk_idx` ON `ChallengeTeamMember` (`userId` ASC);


-- -----------------------------------------------------
-- Table `TipRating`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `TipRating` ;

CREATE TABLE IF NOT EXISTS `TipRating` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `tipId` INT UNSIGNED NOT NULL,
  `vote` TINYINT(1) NOT NULL DEFAULT 0,
  `created` DATETIME NOT NULL,
  `userId` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`id`),
  CONSTRAINT `tip_rating_tip_fk`
    FOREIGN KEY (`tipId`)
    REFERENCES `UserGoal` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `tip_rating_user_fk`
    FOREIGN KEY (`userId`)
    REFERENCES `User` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8
COLLATE = utf8_general_ci;

CREATE INDEX `tip_rating_tip_fk_idx` ON `TipRating` (`tipId` ASC);

CREATE INDEX `tip_rating_user_fk_idx` ON `TipRating` (`userId` ASC);


-- -----------------------------------------------------
-- Table `FitbitData`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `FitbitData` ;

CREATE TABLE IF NOT EXISTS `FitbitData` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `gender` VARCHAR(45) NULL,
  `dateOfBirth` VARCHAR(45) NULL,
  `timezone` VARCHAR(45) NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8
COLLATE = utf8_general_ci;


-- -----------------------------------------------------
-- Table `FitbitDevice`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `FitbitDevice` ;

CREATE TABLE IF NOT EXISTS `FitbitDevice` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `deviceId` CHAR(12) NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;

CREATE INDEX `device_idx` ON `FitbitDevice` (`deviceId` ASC);


-- -----------------------------------------------------
-- Placeholder table for view `ChallengeData`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ChallengeData` (`challengeId` INT, `teamNum` INT, `members` INT, `quizPoints` INT, `stepPoints` INT, `goalPoints` INT);

-- -----------------------------------------------------
-- Placeholder table for view `StepsWeekly`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `StepsWeekly` (`userId` INT, `week` INT, `weekAt` INT, `steps` INT, `weeklyStatusId` INT);

-- -----------------------------------------------------
-- Placeholder table for view `ChallengeStats`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ChallengeStats` (`challengeId` INT, `teamNum` INT, `quizPoints` INT, `goalPoints` INT, `stepPoints` INT, `totalPoints` INT);

-- -----------------------------------------------------
-- Placeholder table for view `UserPoints`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `UserPoints` (`userId` INT, `points` INT);

-- -----------------------------------------------------
-- Placeholder table for view `UserStepRank`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `UserStepRank` (`userId` INT, `points` INT, `rank` INT, `levelId` INT);

-- -----------------------------------------------------
-- Placeholder table for view `UserQuizPoints`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `UserQuizPoints` (`userId` INT, `points` INT);

-- -----------------------------------------------------
-- Placeholder table for view `UserGoalRank`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `UserGoalRank` (`userId` INT, `points` INT, `rank` INT, `levelId` INT);

-- -----------------------------------------------------
-- Placeholder table for view `UserGoalStats`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `UserGoalStats` (`id` INT, `persons` INT, `tipsCount` INT);

-- -----------------------------------------------------
-- Placeholder table for view `UserLevel`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `UserLevel` (`userId` INT, `levelId` INT);

-- -----------------------------------------------------
-- Placeholder table for view `UserQuizRank`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `UserQuizRank` (`userId` INT, `points` INT, `rank` INT, `levelId` INT);

-- -----------------------------------------------------
-- Placeholder table for view `UserRank`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `UserRank` (`userId` INT, `points` INT, `levelId` INT, `rank` INT);

-- -----------------------------------------------------
-- Placeholder table for view `UserGoalPoints`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `UserGoalPoints` (`userId` INT, `points` INT);

-- -----------------------------------------------------
-- Placeholder table for view `UserStepPoints`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `UserStepPoints` (`userId` INT, `points` INT);

-- -----------------------------------------------------
-- Placeholder table for view `UserGoalStatus`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `UserGoalStatus` (`id` INT, `totalDays` INT, `daysLeft` INT, `successful` INT);

-- -----------------------------------------------------
-- Placeholder table for view `UserGoalTips`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `UserGoalTips` (`userId` INT, `tips` INT, `weeklyGoalId` INT);

-- -----------------------------------------------------
-- Placeholder table for view `ChallengeTeamMembers`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ChallengeTeamMembers` (`id` INT, `challengeId` INT, `teamNum` INT, `userId` INT);

-- -----------------------------------------------------
-- View `ChallengeData`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `ChallengeData` ;
DROP TABLE IF EXISTS `ChallengeData`;
CREATE  OR REPLACE VIEW `ChallengeData` AS
   SELECT 
	challenge.id as challengeId,	
	team.teamNum teamNum,
	count(members.userId) members,
	(
		SELECT ifnull(sum(PointLog.points), 0) 
		FROM PointLog 
		LEFT JOIN ChallengeTeamMember members on PointLog.userId = members.userId
		WHERE 
			team.challengeId = challenge.id and 
			members.teamid = team.id and 
			PointLog.`type` = 'quizPoint' and 
			yearweek(PointLog.dayAt,3) = yearweek(challenge.weekAt,3) and 
			weekday(PointLog.dayAt) between 0 and 4
	) quizPoints,
	(
		SELECT ifnull(sum(PointLog.points), 0) 
		FROM PointLog 
		LEFT JOIN ChallengeTeamMember members on PointLog.userId = members.userId
		WHERE 
			team.challengeId = challenge.id and 
			members.teamid = team.id and 
			PointLog.`type` = 'stepPoint' and 
			yearweek(PointLog.dayAt,3) = yearweek(challenge.weekAt,3) and 
			weekday(PointLog.dayAt) between 0 and 4
	) stepPoints,
	(
		SELECT ifnull(sum(PointLog.points), 0) 
		FROM PointLog 
		LEFT JOIN ChallengeTeamMember members on PointLog.userId = members.userId
		WHERE 
			team.challengeId = challenge.id and 
			members.teamid = team.id and 
			PointLog.`type` = 'goalPoint' and 
			yearweek(PointLog.dayAt,3) = yearweek(challenge.weekAt,3) and 
			weekday(PointLog.dayAt) between 0 and 4
	) goalPoints
FROM Challenge challenge
LEFT JOIN ChallengeTeam team ON challenge.id = team.challengeId
LEFT JOIN ChallengeTeamMember members on team.id = members.teamId
GROUP BY challenge.id, team.id;

-- -----------------------------------------------------
-- View `StepsWeekly`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `StepsWeekly` ;
DROP TABLE IF EXISTS `StepsWeekly`;
CREATE  OR REPLACE VIEW `StepsWeekly` AS
    SELECT 
        ds.userId AS userId,
        YEARWEEK(ds.dayAt, 3) AS `week`,
        DATE_ADD(ds.dayAt, INTERVAL(1-DAYOFWEEK(ds.dayAt)) +1 DAY) AS `weekAt`,
        SUM(ds.stepsDone) AS `steps`,
        (SELECT ws.id FROM WeeklyStatus ws WHERE ws.userId = ds.userId and DATE_ADD(ds.dayAt, INTERVAL(1-DAYOFWEEK(ds.dayAt)) +1 DAY) = ws.weekAt) as weeklyStatusId
    FROM
        DailyStatus ds
    GROUP BY ds.userId , YEARWEEK(ds.dayAt, 3);

-- -----------------------------------------------------
-- View `ChallengeStats`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `ChallengeStats` ;
DROP TABLE IF EXISTS `ChallengeStats`;
CREATE  OR REPLACE VIEW `ChallengeStats` AS
    SELECT 
        `ChallengeData`.`challengeId` AS `challengeId`,        
        `ChallengeData`.`teamNum` AS `teamNum`,        
        (`ChallengeData`.`quizPoints` / `ChallengeData`.`members`) AS `quizPoints`,
        (`ChallengeData`.`goalPoints` / `ChallengeData`.`members`) AS `goalPoints`,
        (`ChallengeData`.`stepPoints` / `ChallengeData`.`members`) AS `stepPoints`,
        (((`ChallengeData`.`quizPoints` + `ChallengeData`.`goalPoints`) + `ChallengeData`.`stepPoints`) / `ChallengeData`.`members`) AS `totalPoints`
    FROM
        `ChallengeData`;

-- -----------------------------------------------------
-- View `UserPoints`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `UserPoints` ;
DROP TABLE IF EXISTS `UserPoints`;
CREATE  OR REPLACE VIEW `UserPoints` AS
    SELECT 
        u.`id` AS userId, IFNULL(SUM(pl.`points`), 0) AS points
    FROM
        `User` u
            LEFT JOIN
        `PointLog` pl ON u.`id` = pl.`userId`
    GROUP BY u.`id`;

-- -----------------------------------------------------
-- View `UserStepRank`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `UserStepRank` ;
DROP TABLE IF EXISTS `UserStepRank`;
CREATE  OR REPLACE VIEW `UserStepRank` AS
    SELECT 
        `up`.`userId` AS `userId`,
        `up`.`points` AS `points`,
        FIND_IN_SET(`up`.`points`,
                (SELECT 
                        GROUP_CONCAT(DISTINCT `UserStepPoints`.`points`
                                ORDER BY `UserStepPoints`.`points` DESC
                                SEPARATOR ',')
                    FROM
                        `UserStepPoints`)) AS `rank`,
        `ul`.`levelId` AS `levelId`
    FROM
        (`UserStepPoints` `up`
        LEFT JOIN `UserLevel` `ul` ON ((`ul`.`userId` = `up`.`userId`)));

-- -----------------------------------------------------
-- View `UserQuizPoints`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `UserQuizPoints` ;
DROP TABLE IF EXISTS `UserQuizPoints`;
CREATE  OR REPLACE VIEW `UserQuizPoints` AS
    SELECT 
        `PointLog`.`userId` AS userId,
        SUM(`PointLog`.`points`) AS points
    FROM
        `PointLog`
    WHERE
        `PointLog`.`type` = 'quizPoint'
    GROUP BY `PointLog`.`userId` 
    UNION SELECT 
        id AS userId,
        0 AS points
    FROM
        User
    WHERE
        id NOT IN (SELECT 
                userId
            FROM
                `PointLog`
            WHERE
                `type` = 'quizPoint');

-- -----------------------------------------------------
-- View `UserGoalRank`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `UserGoalRank` ;
DROP TABLE IF EXISTS `UserGoalRank`;
CREATE  OR REPLACE VIEW `UserGoalRank` AS
    SELECT 
        `up`.`userId` AS `userId`,
        `up`.`points` AS `points`,
        FIND_IN_SET(`up`.`points`,
                (SELECT 
                        GROUP_CONCAT(DISTINCT `UserGoalPoints`.`points`
                                ORDER BY `UserGoalPoints`.`points` DESC
                                SEPARATOR ',')
                    FROM
                        `UserGoalPoints`)) AS `rank`,
        `ul`.`levelId` AS `levelId`
    FROM
        (`UserGoalPoints` `up`
        LEFT JOIN `UserLevel` `ul` ON ((`ul`.`userId` = `up`.`userId`)));

-- -----------------------------------------------------
-- View `UserGoalStats`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `UserGoalStats` ;
DROP TABLE IF EXISTS `UserGoalStats`;
CREATE  OR REPLACE VIEW `UserGoalStats` AS 
SELECT
	weeklyGoalId AS id,
	count(userId) AS persons,
	sum(tips) AS tipsCount
from UserGoalTips
group by weeklyGoalId
order by persons DESC, tipsCount DESC, weeklyGoalId DESC;

-- -----------------------------------------------------
-- View `UserLevel`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `UserLevel` ;
DROP TABLE IF EXISTS `UserLevel`;
CREATE  OR REPLACE VIEW `UserLevel` AS 
select 
	`LevelLog`.`userId` AS `userId`,
	max(`LevelLog`.`levelId`) AS `levelId` 
from `LevelLog` group by `LevelLog`.`userId`;

-- -----------------------------------------------------
-- View `UserQuizRank`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `UserQuizRank` ;
DROP TABLE IF EXISTS `UserQuizRank`;
CREATE  OR REPLACE VIEW `UserQuizRank` AS
    SELECT 
        `up`.`userId` AS `userId`,
        `up`.`points` AS `points`,
        FIND_IN_SET(`up`.`points`,
                (SELECT 
                        GROUP_CONCAT(DISTINCT `UserQuizPoints`.`points`
                                ORDER BY `UserQuizPoints`.`points` DESC
                                SEPARATOR ',')
                    FROM
                        `UserQuizPoints`)) AS `rank`,
        `ul`.`levelId` AS `levelId`
    FROM
        (`UserQuizPoints` `up`
        LEFT JOIN `UserLevel` `ul` ON ((`ul`.`userId` = `up`.`userId`)));

-- -----------------------------------------------------
-- View `UserRank`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `UserRank` ;
DROP TABLE IF EXISTS `UserRank`;
CREATE  OR REPLACE VIEW `UserRank` AS
    SELECT 
        up.userId,
        up.points,
        ul.levelId,
        FIND_IN_SET(points,
                (SELECT 
                        GROUP_CONCAT(DISTINCT points
                                ORDER BY points DESC)
                    FROM
                        UserPoints)) AS rank
    FROM
        UserPoints up
            LEFT JOIN
        UserLevel ul ON ul.userId = up.userId;

-- -----------------------------------------------------
-- View `UserGoalPoints`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `UserGoalPoints` ;
DROP TABLE IF EXISTS `UserGoalPoints`;
CREATE  OR REPLACE VIEW `UserGoalPoints` AS
        SELECT 
        `PointLog`.`userId` AS userId,
        SUM(`PointLog`.`points`) AS points
    FROM
        `PointLog`
    WHERE
        `PointLog`.`type` = 'goalPoint'
    GROUP BY `PointLog`.`userId` 
    UNION SELECT 
        id AS userId,
        0 AS points
    FROM
        User
    WHERE
        id NOT IN (SELECT 
                userId
            FROM
                `PointLog`
            WHERE
                `type` = 'goalPoint');

-- -----------------------------------------------------
-- View `UserStepPoints`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `UserStepPoints` ;
DROP TABLE IF EXISTS `UserStepPoints`;
CREATE  OR REPLACE VIEW `UserStepPoints` AS
    SELECT 
        `PointLog`.`userId` AS userId,
        SUM(`PointLog`.`points`) AS points
    FROM
        `PointLog`
    WHERE
        `PointLog`.`type` = 'stepPoint'
    GROUP BY `PointLog`.`userId` 
    UNION SELECT 
        id AS userId,
        0 AS points
    FROM
        User
    WHERE
        id NOT IN (SELECT 
                userId
            FROM
                `PointLog`
            WHERE
                `type` = 'stepPoint');

-- -----------------------------------------------------
-- View `UserGoalStatus`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `UserGoalStatus` ;
DROP TABLE IF EXISTS `UserGoalStatus`;
CREATE  OR REPLACE VIEW `UserGoalStatus` AS
    SELECT 
		id,
        DATEDIFF(endsAt, startsAt) + 1 AS totalDays,
        DATEDIFF(endsAt, now()) AS daysLeft,
        IF(completedDays >= goalDays,
            1,
            0) AS successful
    FROM
        UserGoal;

-- -----------------------------------------------------
-- View `UserGoalTips`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `UserGoalTips` ;
DROP TABLE IF EXISTS `UserGoalTips`;
CREATE  OR REPLACE VIEW `UserGoalTips` AS
SELECT
	userId,
	sum((case when (tip is not null) then 1 else 0 end)) AS tips,
	weeklyGoalId
FROM UserGoal
GROUP BY weeklyGoalId, userId
ORDER BY tips DESC, userId DESC
;

-- -----------------------------------------------------
-- View `ChallengeTeamMembers`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `ChallengeTeamMembers` ;
DROP TABLE IF EXISTS `ChallengeTeamMembers`;
CREATE  OR REPLACE VIEW `ChallengeTeamMembers` AS
    SELECT 
        tm.id, t.challengeId, t.teamNum, tm.userId
    FROM
        ChallengeTeamMember tm
            LEFT JOIN
        ChallengeTeam t ON tm.teamId = t.id;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
